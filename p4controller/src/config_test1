    # Write the rules that tunnel traffic from h1 to h3
    #write Arp Rules
    writeArpRule(p4info_helper, ingress_sw=switches["s1"], dst_ip_addr="10.0.1.1", switch_port=1, prefix_size=32)
    writeArpRule(p4info_helper, ingress_sw=switches["s1"], dst_ip_addr="10.0.2.0", switch_port=2, prefix_size=24)

    #write arp Rules on the border
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.2", 1, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.3", 2, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.4", 3, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.5", 4, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.6", 5, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.7", 6, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.8", 7, 32)
    writeArpRule(p4info_helper, switches["s2"], "10.0.2.9", 8, 32)   
    #end of arp Rules

    #delivering video to hosts 
    #im not treating the case when a host with different eth addres and port connect to the network
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.2", "00:00:00:00:02:02", 1, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.3", "00:00:00:00:02:03", 2, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.4", "00:00:00:00:02:04", 3, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.5", "00:00:00:00:02:05", 4, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.6", "00:00:00:00:02:06", 5, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.7", "00:00:00:00:02:07", 6, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.8", "00:00:00:00:02:08", 7, 32)
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.2.9", "00:00:00:00:02:09", 8, 32)
    #end of delivery rules


    #setting the paths ----     
    #path1 2 -> 1
    writeIpv4Rule(p4info_helper, switches["s2"], "10.0.1.1", "00:00:00:00:01:01", 9, 32)

    #request to server rule
    writeIpv4Rule(p4info_helper, switches["s1"], "10.0.1.1", "00:00:00:00:01:01", 1, 32)

    #path 1 -> 2 -> 3
    simpleForwarding(p4info_helper, switches["s3"], "10.0.2.0", 2, 24)


    if(LOAD_BALANCING_FLAG):
        #set output ports of the balancing -- ecmp_cout must be equal to the number of paths. 
        writeBalancingEntry(p4info_helper,ingress_sw=switches["s1"], dst_ip_addr="10.0.2.0", ecmp_base=0, ecmp_count=2, prefix_size=24)
        #flow 1 is sent from switch s1 through port 2
        setNextHop(p4info_helper, ingress_sw=switches["s1"], ecmp_select=1, switch_port=2)
        #flow 1 is sent from switch s1 through port 2
        setNextHop(p4info_helper, ingress_sw=switches["s1"], ecmp_select=0, switch_port=3)
    else:
        #(without balancing) path 1 -> 2
        writeIpv4Rule(p4info_helper, switches["s1"], "10.0.2.0", "00:00:00:00:02:02", 2, 24)
